import asyncio
import os
import json
import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if not os.path.exists("users.json"):
    with open("users.json", "w") as f:
        json.dump({}, f)

def load_users():
    with open("users.json", "r", encoding="utf-8") as f:
        return json.load(f)

def save_users(data):
    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegState(StatesGroup):
    name = State()
    goal = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üìö –£—á–∏—Ç—å—Å—è"), KeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å")],
    [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
    [KeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å (FAQ)")]
], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_bot(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    today = datetime.date.today().isoformat()

    if user_id not in users:
        users[user_id] = {
            "name": None,
            "goal": None,
            "is_premium": False,
            "points": 0,
            "current_level": "A1",
            "lesson_index": 0,
            "language": "en",
            "voice_enabled": True,
            "voice": "male",
            "accent": "american",
            "start_time": today,
            "last_positive_date": "",
            "daily_positive_enabled": True,
            "registration_time": today,
            "premium_time": None,
            "plan_per_day": None,
            "guest_mode": False
        }
        save_users(users)
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç –≤ Planet Learn Languages!\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üöÄ –£—á–∏—Ç—å—Å—è –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")]], resize_keyboard=True)
        )
        await state.set_state(RegState.name)
    else:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ Planet Learn Languages!", reply_markup=main_menu)
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–æ–≤ A1 (—à–∞–±–ª–æ–Ω)
    lessons = {
        "A1": {
            "en": [
                {
                    "text": "Lesson 1: Greetings\n- Hello!\n- How are you?\n- I'm fine, thank you!",
                    "test": [
                        ("How do you say '–ü—Ä–∏–≤–µ—Ç'?", "hello"),
                        ("How do you answer 'How are you?'?", "I'm fine, thank you")
                    ]
                },
                {
                    "text": "Lesson 2: Numbers\n- One, two, three, four, five.",
                    "test": [
                        ("How do you say '–¥–≤–∞'?", "two"),
                        ("How do you say '–ø—è—Ç—å'?", "five")
                    ]
                }
            ]
        }
    }

    # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—É—Ç—Å—Ç–≤–∏—è
    positive_messages_kids = [
        "üåü –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∑–Ω–∞–µ—à—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ!",
        "ü¶Ñ –£—á–∏—Ç—å—Å—è ‚Äî —ç—Ç–æ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ!",
        "üê£ –°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–¥–µ–ª–∞–µ—à—å –º–∞–ª–µ–Ω—å–∫–æ–µ —á—É–¥–æ!"
    ]

    positive_messages_adults = [
        "‚òÄÔ∏è –ú–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –±–æ–ª—å—à–∞—è –ø–æ–±–µ–¥–∞.",
        "üöÄ –£—á—ë–±–∞ ‚Äî —ç—Ç–æ —Å–≤–æ–±–æ–¥–∞. –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è!",
        "üåç –ù–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –º–∏—Ä –¥–ª—è —Ç–µ–±—è."
    ]

    sent_positive_today = []

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    async def send_positive_if_needed(user_id, message):
        today = datetime.date.today().isoformat()
        user = users.get(user_id, {})

        if user.get("daily_positive_enabled", True):
            if user.get("last_positive_date", "") != today:
                pool = positive_messages_kids if user.get("guest_mode", False) else positive_messages_adults
                available = [m for m in pool if m not in sent_positive_today]
                if available:
                    text = random.choice(available)
                    sent_positive_today.append(text)
                    await message.answer(text)
                users[user_id]["last_positive_date"] = today
                save_users(users)

    # –ö–æ–º–∞–Ω–¥–∞ –£—á–∏—Ç—å—Å—è
    @dp.message(F.text == "üìö –£—á–∏—Ç—å—Å—è")
    async def start_learning(message: types.Message):
        user_id = str(message.from_user.id)
        await send_positive_if_needed(user_id, message)

        user = users.get(user_id, {})
        lang = user.get("language", "en")
        level = user.get("current_level", "A1")
        index = user.get("lesson_index", 0)

        lesson_list = lessons.get(level, {}).get(lang, [])
        if index >= len(lesson_list):
            await message.answer("üéâ –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è!")
            return

        lesson = lesson_list[index]
        await message.answer(lesson["text"])
        await message.answer("‚úçÔ∏è –ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç? –ù–∞–ø–∏—à–∏: –¢–µ—Å—Ç")

    # FSM –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    class TestState(StatesGroup):
        waiting_for_answer = State()

    active_tests = {}

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    @dp.message(F.text.lower() == "—Ç–µ—Å—Ç")
    async def start_test(message: types.Message, state: FSMContext):
        user_id = str(message.from_user.id)
        user = users.get(user_id, {})
        lang = user.get("language", "en")
        level = user.get("current_level", "A1")
        index = user.get("lesson_index", 0)

        lesson = lessons.get(level, {}).get(lang, [])[index]
        questions = lesson.get("test", [])

        if not questions:
            await message.answer("‚ùå –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return

        active_tests[user_id] = {
            "questions": questions,
            "current_index": 0,
            "correct": 0
        }

        await state.set_state(TestState.waiting_for_answer)
        await message.answer(f"üß™ –í–æ–ø—Ä–æ—Å 1:\n{questions[0][0]}")

    # –ü—Ä–∏—ë–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç
    @dp.message(TestState.waiting_for_answer)
    async def answer_test(message: types.Message, state: FSMContext):
        user_id = str(message.from_user.id)
        test = active_tests[user_id]
        answer = message.text.strip().lower()
        correct = test["questions"][test["current_index"]][1].strip().lower()

        if answer == correct:
            test["correct"] += 1
            await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        else:
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")

        test["current_index"] += 1
        if test["current_index"] < len(test["questions"]):
            q = test["questions"][test["current_index"]][0]
            await message.answer(f"üß™ –í–æ–ø—Ä–æ—Å {test['current_index']+1}:\n{q}")
        else:
            score = test["correct"]
            total = len(test["questions"])
            if score == total:
                users[user_id]["points"] += 10
                users[user_id]["lesson_index"] += 1
                await message.answer(f"üéâ –û—Ç–ª–∏—á–Ω–æ! –£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω! (+10 –±–∞–ª–ª–æ–≤)")
            else:
                await message.answer(f"üìò –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{total}")
            save_users(users)
            await state.clear()
            del active_tests[user_id]
        # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        @dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        async def show_profile(message: types.Message):
            user_id = str(message.from_user.id)
            user = users.get(user_id, {})

            name = user.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            goal = user.get("goal", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            points = user.get("points", 0)
            level = user.get("current_level", "A1")
            premium = "‚úÖ –ï—Å—Ç—å" if user.get("is_premium") else "‚ùå –ù–µ—Ç"
            voice_status = "üîä –í–∫–ª—é—á–µ–Ω–∞" if user.get("voice_enabled", True) else "üîá –í—ã–∫–ª—é—á–µ–Ω–∞"
            plan = user.get("plan_per_day", "–ù–µ –∑–∞–¥–∞–Ω")

            language_flags = {
                "en": "üá¨üáß English", "es": "üá™üá∏ Espa√±ol", "zh": "üá®üá≥ ‰∏≠Êñá", "ar": "üá¶üá™ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
                "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π", "uk": "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "fr": "üá´üá∑ Fran√ßais", "de": "üá©üá™ Deutsch",
                "pt": "üáµüáπ Portugu√™s", "ja": "üáØüáµ Êó•Êú¨Ë™û", "ko": "üá∞üá∑ ÌïúÍµ≠Ïñ¥", "bn": "üáßüá© ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ",
                "hi": "üáÆüá≥ ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", "tr": "üáπüá∑ T√ºrk√ße", "sw": "üåç Suahili", "ha": "üá≥üá¨ Hausa",
                "yo": "üá≥üá¨ Yoruba", "tw": "üá¨üá≠ Twi", "am": "üá™üáπ ·ä†·àõ·à≠·äõ", "ln": "üá®üá© Lingala"
            }

            lang = language_flags.get(user.get("language", "en"), "üá¨üáß English")

            text = (
                f"üë§ –ò–º—è: {name}\n"
                f"üéØ –¶–µ–ª—å: {goal}\n"
                f"‚≠ê –ë–∞–ª–ª—ã: {points}\n"
                f"üíé –ü—Ä–µ–º–∏—É–º: {premium}\n"
                f"üìö –£—Ä–æ–≤–µ–Ω—å: {level}\n"
                f"üóì –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å: {plan}\n"
                f"üåç –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {lang}\n"
                f"{voice_status}"
            )
            await message.answer(text)

        # –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        @dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        async def settings_menu(message: types.Message):
            settings_keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"), KeyboardButton(text="üîä –û–∑–≤—É—á–∫–∞: –í–∫–ª/–í—ã–∫–ª")],
                [KeyboardButton(text="üéØ –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å"), KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ], resize_keyboard=True)
            await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=settings_keyboard)

        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–∏
        @dp.message(F.text == "üîä –û–∑–≤—É—á–∫–∞: –í–∫–ª/–í—ã–∫–ª")
        async def toggle_voice(message: types.Message):
            user_id = str(message.from_user.id)
            current = users[user_id].get("voice_enabled", True)
            users[user_id]["voice_enabled"] = not current
            save_users(users)
            status = "üîä –í–∫–ª—é—á–µ–Ω–∞" if users[user_id]["voice_enabled"] else "üîá –í—ã–∫–ª—é—á–µ–Ω–∞"
            await message.answer(f"–û–∑–≤—É—á–∫–∞ —Ç–µ–ø–µ—Ä—å: {status}", reply_markup=main_menu)

        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
        @dp.message(F.text == "üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
        async def change_language(message: types.Message):
            lang_keyboard = ReplyKeyboardMarkup(keyboard=[
                [KeyboardButton(text="üá¨üáß English"), KeyboardButton(text="üá™üá∏ Espa√±ol")],
                [KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), KeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")],
                [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ], resize_keyboard=True)
            await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", reply_markup=lang_keyboard)

        @dp.message(F.text.regexp("^üá¨üáß|üá™üá∏|üá∑üá∫|üá∫üá¶"))
        async def set_language(message: types.Message):
            user_id = str(message.from_user.id)
            flag = message.text.split()[0]
            lang_map = {
                "üá¨üáß": "en", "üá™üá∏": "es", "üá∑üá∫": "ru", "üá∫üá¶": "uk"
            }
            users[user_id]["language"] = lang_map.get(flag, "en")
            save_users(users)
            await message.answer("‚úÖ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ /start.", reply_markup=main_menu)

        # –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
        @dp.message(F.text == "üéØ –ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å")
        async def set_daily_plan(message: types.Message, state: FSMContext):
            await message.answer("–°–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –¥–µ–Ω—å?")
            await state.set_state(State(name="plan_setting"))

        @dp.message(State(name="plan_setting"))
        async def save_plan(message: types.Message, state: FSMContext):
            user_id = str(message.from_user.id)
            users[user_id]["plan_per_day"] = message.text.strip()
            save_users(users)
            await message.answer("‚úÖ –ü–ª–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_menu)
            await state.clear()
        # –¶–µ–Ω—ã –ø—Ä–µ–º–∏—É–º–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        price_map = {
            "ha": 1, "yo": 1, "sw": 1, "am": 1, "ln": 1, "bn": 1,
            "uk": 2, "hi": 2, "ar": 2, "tr": 2, "pt": 2,
            "en": 3, "es": 3, "fr": 3, "de": 3, "ja": 3, "ko": 3, "zh": 3, "ru": 2
        }

        ton_wallet = "UQD5Czj7punsmiU_3dIlcb6bSc5GGzPIi_CfreRBERayOUJG"

        # –†–∞–±–æ—Ç–∞ —Å –æ—á–µ—Ä–µ–¥—å—é –ø–æ–º–æ—â–∏
        if not os.path.exists("help_queue.json"):
            with open("help_queue.json", "w") as f:
                json.dump([], f)

        def load_help_queue():
            with open("help_queue.json", "r") as f:
                return json.load(f)

        def save_help_queue(queue):
            with open("help_queue.json", "w") as f:
                json.dump(queue, f, indent=2)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ü—Ä–µ–º–∏—É–º–∞
        @dp.message(F.text == "üíé –ü—Ä–µ–º–∏—É–º")
        async def show_premium(message: types.Message):
            user_id = str(message.from_user.id)
            lang = users.get(user_id, {}).get("language", "en")
            price = price_map.get(lang, 3)

            premium_text = (
                f"üíé –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —É—Ä–æ–∫–∏, —Ç–µ—Å—Ç—ã, –æ–∑–≤—É—á–∫—É, –≥–æ–ª–æ—Å–æ–≤—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n\n"
                f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä–∞–∑–æ–≤–∞—è, –Ω–∞–≤—Å–µ–≥–¥–∞): *{price} TON*\n"
                f"üí∞ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n`{ton_wallet}`\n\n"
                f"*–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è 60 –¥–Ω–µ–π. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —Å —Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞.*\n\n"
                f"ü§ù –¶–µ–Ω–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è. –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –µ–¥–∏–Ω–æ–≥–æ –º–∏—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å –Ω–∞–º–∏!"
            )

            pay_buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")],
                [InlineKeyboardButton(text="ü§ù –ü–æ–º–æ—â—å –≤ –æ–ø–ª–∞—Ç–µ (–Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤)", callback_data="request_help")]
            ])

            await message.answer(premium_text, parse_mode="Markdown", reply_markup=pay_buttons)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
        @dp.callback_query(F.data == "paid")
        async def confirm_paid(callback: types.CallbackQuery):
            user_id = str(callback.from_user.id)
            users[user_id]["is_premium"] = True
            users[user_id]["premium_time"] = datetime.date.today().isoformat()
            save_users(users)
            await callback.message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞!", reply_markup=main_menu)

        # –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –≤ –æ–ø–ª–∞—Ç–µ
        @dp.callback_query(F.data == "request_help")
        async def request_help(callback: types.CallbackQuery):
            user_id = str(callback.from_user.id)
            queue = load_help_queue()
            if user_id not in queue:
                queue.append(user_id)
                save_help_queue(queue)
                await callback.message.answer("ü§ù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç –∑–∞ –≤–∞—Å, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ü—Ä–µ–º–∏—É–º.")
            else:
                await callback.message.answer("üîÑ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏.")
import aiofiles
import zipfile
import random

# –†–∞—Å—á—ë—Ç –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def calculate_stats():
    today = datetime.date.today().isoformat()
    total_users = len(users)
    total_premium = sum(1 for u in users.values() if u.get("is_premium"))
    new_today = sum(1 for u in users.values() if u.get("registration_time") == today)
    payments_today = sum(1 for u in users.values() if u.get("premium_time") == today)
    return total_users, total_premium, new_today, payments_today

# –ê–¥–º–∏–Ω ID
ADMIN_ID = 7462557119

# –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    total, premium, new_today, paid_today = calculate_stats()
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"üíé –ü—Ä–µ–º–∏—É–º–æ–≤: {premium}\n"
        f"‚ûï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today}\n"
        f"üí∞ –û–ø–ª–∞—Ç —Å–µ–≥–æ–¥–Ω—è: {paid_today}"
    )

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–≤—Ç–æ–æ—Ç—á—ë—Ç –≤ 6:15 –ø–æ –ö–∏–µ–≤—É
async def daily_report():
    while True:
        now = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=3)
        if now.hour == 6 and now.minute == 15:
            total, premium, new_today, paid_today = calculate_stats()
            await bot.send_message(
                ADMIN_ID,
                f"üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç:\n\n"
                f"üë• –í—Å–µ–≥–æ: {total}\n"
                f"üíé –ü—Ä–µ–º–∏—É–º: {premium}\n"
                f"‚ûï –ù–æ–≤—ã—Ö: {new_today}\n"
                f"üí∞ –û–ø–ª–∞—Ç: {paid_today}"
            )
        await asyncio.sleep(60)

# –ê–≤—Ç–æ–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—á–µ—Ä–µ–¥–∏
async def archive_every_hour():
    while True:
        now = datetime.datetime.now().strftime("%Y%m%d_%H%M")
        users_count = len(users)
        zip_filename = f"backup_{now}_users_{users_count}.zip"

        async with aiofiles.open("users.json", mode='rb') as uf:
            users_data = await uf.read()
        async with aiofiles.open("help_queue.json", mode='rb') as hf:
            help_data = await hf.read()

        with open("users.json", "wb") as f: f.write(users_data)
        with open("help_queue.json", "wb") as f: f.write(help_data)

        with zipfile.ZipFile(zip_filename, 'w') as zipf:
            zipf.write("users.json")
            zipf.write("help_queue.json")

        await bot.send_document(ADMIN_ID, types.FSInputFile(zip_filename))
        os.remove(zip_filename)
        await asyncio.sleep(3600)